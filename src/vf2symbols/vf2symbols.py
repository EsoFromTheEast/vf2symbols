# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Create a set of Apple custom symbols from a variable font.

Instantiates along wght to populate weight if a wght axis exists.

Assumes a ligature exists for each symbol and infers the name from it.
"""

from absl import app
from absl import flags
from absl import logging
from fontTools.varLib import instancer
from fontTools import ttLib
from ninja import ninja_syntax
import os
import subprocess
import sys


FLAGS = flags.FLAGS


# internal flags, typically client wouldn't change
flags.DEFINE_string("build_dir", "build/", "Where build runs.")
flags.DEFINE_bool("gen_ninja", True, "Whether to regenerate build.ninja")
flags.DEFINE_bool("exec_ninja", True, "Whether to run ninja.")

# TODO(rsheeter) support opsz to populate S/M/L
_SYMBOL_NAME_FONT_WEIGHTS = (
    ("Ultralight-M", 100),
    ("Thin-M", 200),
    ("Light-M", 300),
    ("Regular-M", 400),
    ("Medium-M", 500),
    ("Semibold-M", 600),
    ("Bold-M", 700),
    ("Heavy-M", 800),
    ("Black-M", 900),
)


def _build_dir() -> str:
    return os.path.abspath(FLAGS.build_dir)


def _rel_build(path: str) -> str:
    return os.path.relpath(path, _build_dir())


def _resolve_rel_build(path):
    return os.path.abspath(os.path.join(_build_dir(), path))


def _symbols_in_wght_range(wght_range):
    return tuple(n for n, v in _SYMBOL_NAME_FONT_WEIGHTS if v in wght_range)


def _create_font_for_symbol_name(
    ttfont: ttLib.TTFont, symbol_name: str
) -> ttLib.TTFont:
    wght_pos = next(v for n, v in _SYMBOL_NAME_FONT_WEIGHTS if n == symbol_name)
    if "fvar" not in ttfont:
        assert ttfont["OS/2"].usWeightClass == wght_pos
        return ttfont

    # None: drop axis, leaving font at default position
    axis_positions = {a.axisTag: None for a in ttfont["fvar"].axes}
    axis_positions["wght"] = wght_pos

    logging.debug("Generating instances at %s", axis_positions)

    return instancer.instantiateVariableFont(ttfont, axis_positions)


def _write_instance_rule(nw, ttfont, symbol_name):
    axis_positions = {a.axisTag: "drop" for a in ttfont["fvar"].axes}
    wght_pos = next(v for n, v in _SYMBOL_NAME_FONT_WEIGHTS if n == symbol_name)
    axis_positions["wght"] = str(wght_pos)

    pos_str = " ".join(f"{k}={v}" for k, v in axis_positions.items())
    nw.rule(f"Gen_{symbol_name}", f"fonttools varLib.instancer -o $out $in {pos_str}")


def _write_preamble(nw, font_filename, ttfont, wght_range):
    def module_rule(mod_name, arg_pattern):
        nw.rule(mod_name, f"{sys.executable} -m vf2symbols.{mod_name} {arg_pattern}")

    nw.comment("Generated by vf2symbols")
    nw.newline()

    nw.variable("src_font", _rel_build(font_filename))
    nw.newline()

    for symbol_name in _symbols_in_wght_range(wght_range):
        _write_instance_rule(nw, ttfont, symbol_name)

    nw.newline()


def _write_instance_builds(nw, font_filename, wght_range):
    name, ext = os.path.splitext(os.path.basename(font_filename))
    for symbol_name in _symbols_in_wght_range(wght_range):
        nw.build(f"{name}.{symbol_name}{ext}", f"Gen_{symbol_name}", "$src_font")


def _run(argv):
    if len(argv) != 2:
        sys.exit("Expected 1 non-flag argument, a font filename")
    font_filename = os.path.abspath(argv[1])
    root_font = ttLib.TTFont(font_filename)
    wght_range = range(
        root_font["OS/2"].usWeightClass, root_font["OS/2"].usWeightClass + 1
    )
    if "fvar" in root_font:
        wght = next(filter(lambda a: a.axisTag == "wght", root_font["fvar"].axes), None)
        wght_range = range(int(wght.minValue), int(wght.maxValue) + 1)

    os.makedirs(_build_dir(), exist_ok=True)
    build_file = _resolve_rel_build("build.ninja")
    if FLAGS.gen_ninja:
        logging.info(f"Generating %s", os.path.relpath(build_file))
        with open(build_file, "w") as f:
            nw = ninja_syntax.Writer(f)
            _write_preamble(nw, font_filename, root_font, wght_range)
            _write_instance_builds(nw, font_filename, wght_range)

    # TODO: report on failed svgs
    # this is the delta between inputs and picos
    ninja_cmd = ["ninja", "-C", os.path.dirname(build_file)]
    if FLAGS.exec_ninja:
        print(" ".join(ninja_cmd))
        subprocess.run(ninja_cmd, check=True)
    else:
        print("To run:", " ".join(ninja_cmd))


def main():
    # We don't seem to be __main__ when run as cli tool installed by setuptools
    app.run(_run)


if __name__ == "__main__":
    app.run(_run)
